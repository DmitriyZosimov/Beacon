plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagmentVersion"
    id 'org.asciidoctor.convert' version "$asciidoctorConvertVersion"
    id 'maven-publish'
    id 'jacoco'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

    implementation project (':model')
    implementation project (':security')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    runtimeOnly postgresql.postgresql

    testImplementation postgresql.postgresql
    testImplementation zonky.embedded_database_spring_test
    testImplementation zonky.embedded_postgres
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

bootJar {
    mainClass = 'com.beacon.search.SearchApplication'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                artifact bootJar
            }
        }
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled true
        csv.destination file("${buildDir}/reports/jacoco/jacocoTestReport-search.csv")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/beacon/catalog/CatalogApplication.class"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}